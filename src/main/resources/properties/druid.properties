# \u8FDE\u63A5\u6C60\u7684\u914D\u7F6E\u4FE1\u606F\u65E0\u6CD5\u901A\u8FC7\u914D\u7F6E\u9879\u76F4\u63A5\u652F\u6301\u76F8\u5E94\u7684\u8FDE\u63A5\u6C60\uFF1B\u8FD9\u91CC\u5217\u51FA\u7684\u8FD9\u4E9B\u914D\u7F6E\u9879\u53EF\u4EE5\u901A\u8FC7\u5B9A\u5236\u5316DataSource\u6765\u5B9E\u73B0\u3002
# \u76EE\u524DSpring Boot\u4E2D\u9ED8\u8BA4\u652F\u6301\u7684\u8FDE\u63A5\u6C60\u6709dbcp,dbcp2, tomcat, hikari\u4E09\u79CD\u8FDE\u63A5\u6C60\u3002

# \u8FDE\u63A5\u6C60\u521D\u59CB\u5316\u5927\u5C0F
spring.datasource.initialSize=5

# \u8FDE\u63A5\u6C60\u6700\u5C0F
spring.datasource.minIdle=5

# \u8FDE\u63A5\u6C60\u6700\u5927
spring.datasource.maxActive=20

# \u83B7\u53D6\u8FDE\u63A5\u7B49\u5F85\u8D85\u65F6\u7684\u65F6\u95F4
spring.datasource.maxWait=60000

# \u68C0\u6D4B\u95F4\u9694\u5468\u671F\uFF0C\u68C0\u6D4B\u9700\u8981\u5173\u95ED\u7684\u7A7A\u95F2\u8FDE\u63A5,\u5355\u4F4D:\u6BEB\u79D2
spring.datasource.timeBetweenEvictionRunsMillis=60000

# \u4E00\u4E2A\u8FDE\u63A5\u5728\u6C60\u4E2D\u6700\u5C0F\u751F\u5B58\u7684\u65F6\u95F4,\u5355\u4F4D:\u6BEB\u79D2
spring.datasource.minEvictableIdleTimeMillis=300000


spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false

# \u6253\u5F00PSCache\uFF0C\u5E76\u6307\u5B9A\u6BCF\u4E2A\u8FDE\u63A5\u4E0APSCache\u7684\u5927\u5C0F
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20

# \u76D1\u63A7\u7EDF\u8BA1\u62E6\u622Afilters,\u53BB\u6389\u540E\u76D1\u63A7\u754C\u9762sql\u65E0\u6CD5\u7EDF\u8BA1,'wall'\u7528\u4E8E\u9632\u706B\u5899
spring.datasource.filters=stat,wall,log4j

# \u901A\u8FC7connectProperties\u5C5E\u6027\u6765\u6253\u5F00mergeSql\u529F\u80FD,\u6162SQL\u8BB0\u5F55
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

# \u5408\u5E76\u591A\u4E2ADruidDataSource\u7684\u76D1\u63A7\u6570\u636E
#spring.datasource.useGlobalDataSourceStat=true